{"version":3,"sources":["components/Header.js","components/Footer.js","components/WeatherSearch.js","components/WeatherTable.js","components/WeatherDetail.js","components/Main.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","Footer","WeatherSearch","state","cityName","class","htmlFor","type","id","placeholder","name","value","this","onChange","e","setState","target","onClick","props","handleSearch","React","Component","WeatherTable","weathers","map","val","key","dt","handleWeatherSelect","src","weather","icon","main","Date","toDateString","temp","day","toFixed","WeatherDetail","selectedWeather","humidity","pressure","sunset","toTimeString","sunrise","Main","city","fetchAPI","filter","fetch","then","response","json","data","catch","error","console","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.2e22d54e.chunk.js","sourcesContent":["import React from 'react';\r\n//Stateless or Functional Component\r\nfunction Header(){\r\n    return (\r\n        <header className=\"bg-dark text-light py-5 text-center\">\r\n             <h1>Weather App</h1>\r\n             <p>This will help you find weather anywhere!</p>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\n//Stateless or Functional Component\r\nexport const Footer = () => {\r\n    return (\r\n        <footer className=\"bg-dark text-light py-5 text-center\">\r\n            <p>Copyright &copy; 2020</p>\r\n        </footer>\r\n    );\r\n}\r\n\r\n\r\n","import React from 'react';\r\n\r\nclass WeatherSearch extends React.Component {\r\n    constructor(){\r\n        super()\r\n        //To create form:\r\n        //1) Create states/variables based on the number of inputs that you have\r\n        this.state={\r\n            // temperature: '',\r\n            cityName: '',\r\n            // country: '',\r\n            // humidity: '',\r\n            // description: '',\r\n            // error: ''\r\n        }\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div class=\"card my-5 py-5 px-5 text-center\">\r\n                <h1>Search City</h1>\r\n                <div class=\"mb-3\">\r\n                    <label htmlFor=\"cityinput\" class=\"form-label\"/>\r\n                    <input type=\"text\" class=\"form-control\" id=\"cityinput\" placeholder=\"Search City\" name=\"city\" value={this.state.cityName} onChange={(e)=>this.setState({cityName:e.target.value})}/>\r\n                </div>\r\n                <button className=\"btn btn-primary\" onClick={()=>this.props.handleSearch(this.state.cityName)}>Search</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default WeatherSearch;","import React from 'react';\r\n//Stateless or Functional Component\r\nfunction WeatherTable(props){\r\n    return (\r\n        <div class=\"card my-5 py-5 px-5 text-center\">\r\n            <h1>8-days forecast</h1>\r\n            <table className=\"table table-bordered table-hover table-striped\">\r\n                <thead class=\"table-success\">\r\n                    <tr>\r\n                        <th>\r\n                            Weather\r\n                        </th>\r\n                        <th>\r\n                            Weather\r\n                        </th>\r\n                        <th>\r\n                            Date\r\n                        </th>\r\n                        <th>\r\n                            Temperature\r\n                        </th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {\r\n                        props.weathers.map(val=> {\r\n                            return(\r\n                                <tr key={val.dt} onClick={()=>props.handleWeatherSelect(val.dt)}>\r\n                                    <td><img src={`https://openweathermap.org/img/wn/${val.weather[0].icon}@2x.png`}/></td>\r\n                                    <td>{val.weather[0].main}</td>\r\n                                    <td>{(new Date(val.dt*1000)).toDateString()}</td>\r\n                                    <td>{(val.temp.day-273.15).toFixed(0)} &deg; C</td>\r\n                                </tr>\r\n                            )\r\n                        })\r\n                    }\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default WeatherTable;","import React from 'react';\r\n//Stateless or Functional Component\r\nfunction WeatherDetail({selectedWeather}){\r\n    return (\r\n        <div class=\"card my-5 py-5 px-5 text-center\">\r\n            <img src={`https://openweathermap.org/img/wn/${selectedWeather.weather[0].icon}@2x.png`}/>\r\n            <p>{selectedWeather.temp.day - 273} &deg; C</p>\r\n            <p>{(new Date(selectedWeather.dt*1000)).toDateString()}</p>\r\n            <p>{selectedWeather.humidity}</p>\r\n            <p>{selectedWeather.pressure}</p>\r\n            <p>{(new Date(selectedWeather.sunset)).toTimeString()}</p>\r\n            <p>{(new Date(selectedWeather.sunrise)).toTimeString()}</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default WeatherDetail;","\r\nimport React from 'react';\r\nimport WeatherSearch from './WeatherSearch';\r\nimport WeatherTable from './WeatherTable';\r\nimport WeatherDetail from './WeatherDetail';\r\n\r\nclass Main extends React.Component{\r\n\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            weathers:[],\r\n            selectedWeather:null\r\n        }\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className='container py-3 card my-3'>\r\n                 {/* Lifting up state - 2) Pass the function as attribute to child */}\r\n                <WeatherSearch handleSearch={this.handleSearch} />\r\n                <WeatherTable weathers={this.state.weathers} handleWeatherSelect={this.handleWeatherSelect}/>\r\n                {\r\n                    this.state.selectedWeather ? <WeatherDetail selectedWeather={this.state.selectedWeather}/> : <div/>\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n\r\n    //Lifting up state - 1) In parent, create the function that is going to be called from child\r\n    // addWod = (name, assignee, difficulty) => {\r\n       \r\n    //    let newWod = {  \r\n    //     name:name,\r\n    //     assignee:assignee,\r\n    //     difficulty:difficulty\r\n    //    }\r\n\r\n    //    this.setState({\r\n    //     weather: [...this.state.weather, newWod]\r\n    //    })\r\n      \r\n    // }\r\n\r\n    // handleRowClick = (name) => {\r\n    //     console.log('click')\r\n    //   let selectedWeather = this.state.weather.filter(\r\n    //         val => {\r\n    //             return val.name == name\r\n    //         }\r\n    //     )[0]\r\n    //     this.setState({\r\n    //         selectedWeather:selectedWeather\r\n    //     })\r\n    //     console.log(this.state.selectedWeather)\r\n    // }\r\n\r\n    handleSearch = (city) => {\r\n            this.fetchAPI(city)\r\n        }\r\n\r\n    handleWeatherSelect = (dt) => {\r\n        this.weathers.filter(val =>{\r\n            return val.dt === dt\r\n        })\r\n        this.setState({\r\n            selectedWeather:this.state.selectedWeather\r\n        })\r\n    }\r\n\r\n    componentDidMount(){\r\n        //this.fetchAPI()\r\n    }\r\n\r\n    fetchAPI(city){\r\n        fetch(`https://api.openweathermap.org/data/2.5/forecast/daily?q=${city}&appid=9a875f3b663d836442770050455b2fbf`)\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                this.setState({\r\n                    weathers:data[\"list\"]\r\n                })\r\n            })\r\n            .catch((error) => {\r\n                console.error('Error:', error);\r\n            });\r\n    }\r\n}\r\n\r\nexport default Main;","import React from 'react';\nimport Header from './components/Header';\nimport {Footer} from './components/Footer';\nimport Main from './components/Main';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div>\n     <Header/>\n     <Main/>\n     <Footer/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}